{
    "collab_server" : "",
    "contents" : "# This file contains a single function for peak calling with arguments:\n# - random: must be either 'none', 'slope', or 'intercept' representing which random effects to be included in the model.\n# - offset: either 'sum' or a vector of length equal to the number of experiments with the sequencing depth offset. If a vector of zeroes, no offset is included in the model.\n# - group: logical indicating whether to included group effect in the model.\n# - quiet: logical indicating whether to output general messages.\n\n#library(Rcpp)\n#library(SummarizedExperiment)\n#sourceCpp(paste0('/Users/pedroluizbaldoni/Dropbox/PhD/Research/Project1/','Package/Functions/code.cpp'))\n#source(paste0('/Users/pedroluizbaldoni/Dropbox/PhD/Research/Project1/','Package/Functions/Base.R'))\n\nfindpeaks.control = function(epsilon.em=c(1e-3,1e-3,1e-3,1e-3),epsilon.inner.em=1e-03,maxit.em=500,\n                             minit.em=3,gap.em=3,maxcount.em=3,max.phi=1e3,min.sigma2=1e-08,\n                             max.sigma2=10,maxcount.inner.em=50,criterion='MULTI',\n                             min.zero=.Machine$double.xmin,pcut=0.05,\n                             # laptype='none',lapcut=1,lapchr='chr19',chrtb=NULL,\n                             quiet=F){\n    # if (lapcut<1 & is.null(chrtb)){stop('Provide table with chromosome name, start, stop, and lengths')}\n    #if (!(length(epsilon.em)==3) & criterion=='MULTI'){stop(\"specify criterion for MRCPE, ARCEL, and ACC\")}\n    if (!is.numeric(epsilon.em) || epsilon.em <= 0){stop(\"value of 'epsilon.em' must be > 0\")}\n    if (!maxit.em%%1==0 || maxit.em <= 0){stop(\"value of 'maxit.em' must be a positive integer\")}\n    if (!minit.em%%1==0 || minit.em <= 0){stop(\"value of 'minit.em' must be a positive integer\")}\n    if (!gap.em%%1==0 || gap.em <= 0 || gap.em>minit.em){stop(\"value of 'gap.em' must be a positive integer <= minit.em\")}\n    if (!maxcount.em%%1==0 || maxcount.em <= 0){stop(\"value of 'maxcount.em' must be a positive integer\")}\n    if (!is.numeric(max.phi) || max.phi <= 0){stop(\"value of 'max.phi' must be > 0\")}\n    if (!is.numeric(max.sigma2) || max.sigma2 <= 0){stop(\"value of 'max.sigma2' must be > 0\")}\n    if (!maxcount.inner.em%%1==0 || maxcount.inner.em <= 0){stop(\"value of 'maxcount.inner.em' must be a positive integer\")}\n    if (!is.logical(quiet)){stop(\"value of 'quiet' must be logical TRUE or FALSE\")}\n    list(epsilon.em=epsilon.em,epsilon.inner.em=epsilon.inner.em,maxit.em=maxit.em,minit.em=minit.em,\n         gap.em=gap.em,maxcount.em=maxcount.em,max.phi=max.phi,min.sigma2=min.sigma2,\n         max.sigma2=max.sigma2,maxcount.inner.em=maxcount.inner.em,criterion=criterion,\n         min.zero=min.zero,pcut=pcut,\n         #laptype=laptype,lapcut=lapcut,lapchr=lapchr,chrtb=chrtb,\n         quiet=quiet)\n}\n\nfindpeaks = function(object,subset,random='none',offset='sum',control=findpeaks.control()){\n  ### Checking for input inconsistencies ###\n  if(missing(object) | class(object)!='RangedSummarizedExperiment' | !('ChIP'%in%names(object@assays))){stop('Provide valid RangedSummarizedExperiment object.')}\n  if(!(subset%in%paste0(\"chr\", c(1:22, \"X\", \"Y\")))){stop(paste0('Subset must be a valid chromosome: ',paste0('(',paste0(\"chr\", c(1:22, \"X\", \"Y\"),collapse=', '),')')))}\n  if(!(random %in% c('none','slope','intercept'))){stop('Provide valid random argument.')}\n  if(!(all(offset=='sum') | all(length(offset)==ncol(object) & class(offset)=='numeric'))){stop('Provide valid offset object.')}\n  if(!is.list(control) | !all((names(control)%in%names(findpeaks.control())))){stop('Provide valid list of control elements.')}\n    if(random %in% c('slope','intercept') & ncol(assay(object,'ChIP'))==1){stop('To fit a random effects model, the number of experiments must be > 1.')}\n\n  ### Assigning objects ###\n  control.user = replace(findpeaks.control(),match(names(control),names(findpeaks.control())),control)\n  if(!is.null(subset)){object = object[seqnames(object)%in%subset]}\n\n  ChIP = assay(object,'ChIP')\n  if('Control' %in% names(object@assays)){\n      Control = log(assay(object,'Control')+1)\n  } else {\n      if(random=='slope'){stop('Provide control experiments to fit a random slope model')}\n      Control = NULL\n  }\n  if(all(offset=='sum')){\n      offset = matrix(rep(as.numeric(scale(log(colSums(ChIP)),scale=F)),each=nrow(assay(object))),ncol=ncol(assay(object)))\n  } else{\n  offset = matrix(rep(offset,each=nrow(assay(object))),ncol=ncol(assay(object)))\n  }\n\n  ### Fitting the model ###\n  if(random == 'none'){\n      model = ZIHMM(ChIP=ChIP,Control=Control,offset=offset,control=control.user)\n  } else{\n      model = ZIMHMM(ChIP=ChIP,Control=Control,offset=offset,random=random,control=control.user)\n  }\n  model$Ranges = rowRanges(object)\n  model$Ranges$Viterbi = model$Viterbi; model$Ranges$PostProb = model$Prob[,1]\n\n  return(model)\n}\n\n# Example\n# object\n#\n# zihmm = findpeaks(object=object,subset='chr22',random='none',offset='sum')\n# zimhmm.rs = findpeaks(object=object,subset='chr22',random='slope',offset='sum')\n# zimhmm.ri = findpeaks(object=object,subset='chr22',random='intercept',offset=c(0,0,0))\n#\n# save(zihmm,zimhmm.rs,zimhmm.ri,file='./Vignete_files/Main.RData')\n",
    "created" : 1550515679681.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1777618884",
    "id" : "3B07044F",
    "lastKnownWriteTime" : 1550870035,
    "last_content_update" : 1550870035889,
    "path" : "~/Dropbox/PhD/Research/Project1/ZIMHMM/R/main.R",
    "project_path" : "R/main.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}