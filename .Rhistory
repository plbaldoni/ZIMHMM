Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(colSums(ChIP),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = T)
ChIP
offset
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(log(colSums(ChIP)),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = T)
offset
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control())
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-6,criterion = 'MRCPE'))
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
document()
devtools::use_readme_rmd()
usethis::use_readme_rmd()
?install_github
?ZIMHMM
devtools::document()
document()
devtools::document()
library(ZIMHMM)
document()
devtools::document()
devtools::document()
library(ZIMHMM)
data("H3K36me3.Huvec")
H3K36me3.Huvec
library(ZIMHMM)
save(H3K36me3.Huvec,file = './data/H3K36me3.Huvec.rda',compress = 'xz')
devtools::document()
library(ZIMHMM)
q()
library(ZIMHMM)
library(ZIMHMM)
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1")])
ChIP
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1")])+1)
Control
offset = matrix(log(colSums(ChIP))[1],nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = TRUE)
offset
peakcall = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
library(ZIMHMM)
peakcall = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(log(colSums(ChIP)),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = TRUE)
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
peakcall = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
x = peakcall
data = ChIP
?
?data.table::melt
names(data)
head(data)
data.table::melt(data,measure.vars=names(data))
datamelt = data.table::melt(data,measure.vars=names(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt
data.table::melt(data,measure.vars=names(data),value.name = 'Counts',variable.name = 'Replicates')
data.table::melt(as.data.table(data),measure.vars=names(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt = data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt <- data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt
datamelt <- NULL
datamelt <- data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt
seq_len(3)
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt
peaks = NULL
if(is.null(peaks)){peaks <- x$Viterbi}
peaks
seq_len(ncol(data))
seq_len(nrow(data)
seq_len(nrow(data))
datamelt[,Window = rep(seq_len(nrow(data)),ncol(data))]
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
if(is.null(peaks)){datamelt[,Peaks := rep(x$Viterbi,ncol(data))]}else{datamelt[,Peaks := rep(peaks,ncol(data))]}
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datamelt
ggplot2::ggplot
ggplot2::ggplot(data=datamelt,aes(x=Window,y=Counts))+ggplot2::geom_lines()+ggplot2::facet_grid(rows=vars(Replicates))
library(ggplot2)
ggplot2::ggplot(data=datamelt,aes(x=Window,y=Counts))+ggplot2::geom_lines()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt,aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ranges = 1000:2000
datamelt[(Window%in%ranges),]
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datamelt
datamelt$Replicates
unique(datamelt$Replicates)
unique(datamelt$Replicates)[1]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
datapeak
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak
datapeak[(Window%in%ranges),]
datamelt[(Window%in%ranges),Counts]
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(data = datapeak[(Window%in%ranges),],aes(x=Window,xend=(Window+1),y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
max(datamelt[(Window%in%ranges),Counts])*1.1
max(datamelt[(Window%in%ranges),Counts])*1.1
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
datapeak
datapeak[Peaks==0,Peaks := NA]
datapeak
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks,yend=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks,yend=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks,
size = 2))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color='blue')+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
brewer.pal(2,'Set1')[2]
RColorBrewer::brewer.pal(2,'Set1')[2]
RColorBrewer::brewer.pal('Set1')[2]
RColorBrewer::brewer.pal('Set1')
RColorBrewer::brewer.pal(3,'Set1')
RColorBrewer::brewer.pal(3,'Set1')[2]
color = RColorBrewer::brewer.pal(3,'Set1')[2]
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')+scale_x_continuous(labels = scales::comma)
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
plotpeaks = function(x,ranges,data,peaks = NULL){
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
return(fig)
}
plotpeaks(peakcall,ranges = c(2000,3000),data=ChIP)
peakcall
ChIP
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
fig
ranges
plotpeaks = function(x,ranges,data,peaks = NULL){
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
return(fig)
}
plotpeaks(peakcall,c(1000,2000),data=ChIP)
plotpeaks(peakcall,c(1000,2000),data=ChIP)
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(log(colSums(ChIP)),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = TRUE)
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
x = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
x
ChIP
plotpeaks = function(x,ranges,data,peaks = NULL){
if(length(ranges)!=2 | ranges[2]<ranges[1]){stop('Argument ranges must be a vector of two integers (x,y) with y>x')}
ranges = ranges[1]:ranges[2]
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
return(fig)
}
plotpeaks(x,ranges=c(1000,2000),data=ChIP)
library(ggplot2)
?aes
library(ZIMHMM)
plotpeaks
# Loading example dataset
data(H3K36me3.Huvec)
# ChIP and Control read counts, as well as the model offset.
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
# Calling peaks
peakcall = ZIMHMM(ChIP = ChIP,Control = Control,offset = offset,random = 'intercept',control = findpeaks.control())
plotpeaks(peakcall,ranges = c(50000,55000),ChIP = ChIP)
?theme_bw()
library(ZIMHMM)
devtools::document()
library(ZIMHMM)
library(ZIMHMM)
# Loading example dataset
data(H3K36me3.Huvec)
# ChIP and Control read counts, as well as the model offset.
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
# Calling peaks
peakcall = ZIMHMM(ChIP = ChIP,Control = Control,offset = offset,random = 'intercept',control = findpeaks.control())
plotpeaks(peakcall,ranges = c(50000,55000),ChIP = ChIP)
rle(peakcall$Viterbi)
View(cbind(rle(peakcall$Viterbi)$lengths,rle(peakcall$Viterbi)$values))
test = View(cbind(rle(peakcall$Viterbi)$lengths,rle(peakcall$Viterbi)$values))
test$csum = cumsum(test$V1)
View(test)
test = (cbind(rle(peakcall$Viterbi)$lengths,rle(peakcall$Viterbi)$values))
test$csum = cumsum(test$V1)
test = cbind(leng=rle(peakcall$Viterbi)$lengths,val=rle(peakcall$Viterbi)$values)
head(test)
test$csum = cumsum(test$V1)
test$csum = cumsum(test$leng)
cumsum(test$leng)
test$leng
test = NULL
test = data.table(leng=rle(peakcall$Viterbi)$lengths,val=rle(peakcall$Viterbi)$values)
test = data.frame(leng=rle(peakcall$Viterbi)$lengths,val=rle(peakcall$Viterbi)$values)
test$csum = cumsum(test$leng)
View(test)
plotpeaks(peakcall,ranges = c(33000,35000),ChIP = ChIP)
plotpeaks(peakcall,ranges = c(9000,11000),ChIP = ChIP)
plotpeaks(peakcall,ranges = c(20000,21000),ChIP = ChIP)
plotpeaks(peakcall,ranges = c(20000,20500),ChIP = ChIP)
plotpeaks(peakcall,ranges = c(20000,20400),ChIP = ChIP)
100*226/15
100*226/25
100*(226*4)/25
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
log.ChIP = log(ChIP+1)
avg.ChIP = exp(rowMeans(log.ChIP))
log.avg.ChIP = log(avg.ChIP)
log.avg.ChIP
head(ChIP,50)
smoothScatter(log(ChIP[,1]+1)~log.avg.ChIP)
abline(0,1)
smoothScatter(log(ChIP[,2]+1)~log.avg.ChIP);abline(0,1)
smoothScatter(log(ChIP[,3]+1)~log.avg.ChIP);abline(0,1)
smoothScatter(log(ChIP[,1]+1)~log.avg.ChIP);abline(0,1)
log.ChIP.M = log.ChIP - matrix(log.avg.ChIP,nrow=M,ncol=N,byrow = F) #M, from MA plot
M = nrow(ChIP)
log.ChIP.M = log.ChIP - matrix(log.avg.ChIP,nrow=M,ncol=N,byrow = F) #M, from MA plot
n = ncol(ChIP)
log.ChIP.M = log.ChIP - matrix(log.avg.ChIP,nrow=M,ncol=N,byrow = F) #M, from MA plot
N = ncol(ChIP)
log.ChIP.M = log.ChIP - matrix(log.avg.ChIP,nrow=M,ncol=N,byrow = F) #M, from MA plot
log.ChIP.A = 0.5*(log.ChIP + matrix(log.avg.ChIP,nrow=M,ncol=N,byrow = F)) #A, from MA plot
offset1 = sapply(1:N,function(i){limma::loessFit(y=log.ChIP.M[,i],x=log.ChIP.A[,i],span = span)$fitted})
offset1 = sapply(1:N,function(i){limma::loessFit(y=log.ChIP.M[,i],x=log.ChIP.A[,i],span = 1)$fitted})
offset1 = sapply(1:N,function(i){limma::loessFit(y=log(ChIP[,i]+1),x=log.avg.ChIP,span = 1)$fitted})
offset1 = sapply(1:N,function(i){limma::loessFit(y=log.ChIP.M[,i],x=log.ChIP.A[,i],span = 1)$fitted})
offset2 = sapply(1:N,function(i){limma::loessFit(y=log(ChIP[,i]+1),x=log.avg.ChIP,span = 1)$fitted})
smoothScatter(offset1[,1]~offset2[,1])
smoothScatter(offset1[,2]~offset2[,2])
smoothScatter(log(ChIP[,i]+1)~offset2[,1])
smoothScatter(log(ChIP[,1]+1)~offset2[,1])
abline(0,1)
smoothScatter(log(ChIP[,1]+1)~offset1[,1])
abline(0,1)
plot(ChIP[1:10000,1],type='l')
plot(ChIP[10000:11000,1],type='l')
plot(ChIP[10000:15000,1],type='l')
par(mfrow=c(3,1))
plot(ChIP[10000:15000,1],type='l')
plot(ChIP[10000:15000,1]/exp(offset1[10000:15000,1]),type='l')
plot(ChIP[10000:15000,1]/exp(offset2[10000:15000,1]),type='l')
plot(ChIP[10000:15000,1]/exp(offset1[10000:15000,1]),type='l')
smoothScatter(log(ChIP[,1]+1)~log.ChIP.A[,1])
par(mfrow=c(1,1))
smoothScatter(log(ChIP[,1]+1)~log.ChIP.A[,1])
abline(0,1)
smoothScatter(log(ChIP[,1]+1)~log.avg.ChIP)
abline(0,1)
smoothScatter(log(ChIP[,2]+1)~log.avg.ChIP)
abline(0,1)
smoothScatter(log(ChIP[,3]+1)~log.avg.ChIP)
abline(0,1)
?limma::loessFit
0.009696*0.009696
sqrt(0.009696)
lplambda = function(lambda){
## start solution
if(lambda<0) return(NA)
else return(log(lambda) - 2*lambda)
## end solution
}
lppi = function(pi){
## start solution
if(pi<0|pi>1) return(NA)
else return(0)
## end solution
}
h.sim = function(xt){
## start solution
pi.old <- xt[1]
lambda.old <- xt[2]
pi.new <-  rnorm(1, pi.old, 0.1)
lambda.new <- rnorm(1, lambda.old, 0.1)
return(c(pi.new, lambda.new))
## end solution
}
ll = function(y, ny, x){
p <- length(y) - 1
n0 <- ny[1]
nn0 <- ny[2:(p+1)]
pi = x[1]
lambda = x[2]
## start solution
loglike <- n0*log(pi + (1-pi)*exp(-lambda))
loglike <- loglike + sum(nn0*(log(1-pi) + (1:p)*log(lambda) - lambda))
loglike <- loglike + lppi(pi) + lplambda(lambda)
return(loglike)
## end solution
}
R = function(y, ny, x, xt){
# x is the proposal, xt is current state
# x[1],xt[1] pertain to pi, x[2],xt[2] pertain to lambda
## start solution
loglike.old <- ll(y, ny, xt)
loglike.new <- ll(y, ny, x)
ratio <- exp(loglike.new - loglike.old)
if(is.na(ratio)) ratio <- 0
else ratio <- min(1, ratio)
## end solution
}
set.seed(1)
y = 0:6
ny = c(3062, 587, 284, 103, 33, 4, 2)
M = 20000
x.rw.chain = matrix(0, M, 2)
colnames(x.rw.chain) = c("pi","lambda")
x.rw.chain[1,] = c(0.3, 3)
for(i in 1:(M-1)){
# set the value at current iteration of the chain to variable xt
xt = x.rw.chain[i, ]
# draw a proposal from the proposal density
x = h.sim(xt)
# calculate MH ratio
r = R(y, ny, x, xt)
# Generate draw from bernoulli(p).
keep = runif(1, 0, 1)
# if keep = 1, then set next iteration equal to then proposal
if(keep <= r){
x.rw.chain[i+1,] = x
}else{
# otherwise, carry over value from the current iteration
x.rw.chain[i+1,] = xt
}
}
cat(sprintf("Lambda: %.2f Pi: %.3f", mean(x.rw.chain[2001:20000,1]), mean(x.rw.chain[2001:20000,2])))
i = 1
### HELPER FUNCTIONS
# log prior for lambda, fill in
lplambda = function(lambda){
## start solution
if(lambda<0) return(NA)
else return(log(lambda) - 2*lambda)
## end solution
}
# log prior for pi, fill in
lppi = function(pi){
## start solution
if(pi<0|pi>1) return(NA)
else return(0)
## end solution
}
# bivariate RW proposal function
# hint: bivariate proposal same as generating two indep proposals here
h.sim = function(xt){
## start solution
pi.old <- xt[1]
lambda.old <- xt[2]
pi.new <-  rnorm(1, pi.old, 0.1)
lambda.new <- rnorm(1, lambda.old, 0.1)
return(c(pi.new, lambda.new))
## end solution
}
# returns ll, or log f(y|lambda, pi)
# compute given y and ny from table
ll = function(y, ny, x){
p <- length(y) - 1
n0 <- ny[1]
nn0 <- ny[2:(p+1)]
pi = x[1]
lambda = x[2]
## start solution
loglike <- n0*log(pi + (1-pi)*exp(-lambda))
loglike <- loglike + sum(nn0*(log(1-pi) + (1:p)*log(lambda) - lambda))
loglike <- loglike + lppi(pi) + lplambda(lambda)
return(loglike)
## end solution
}
# MH ratio
# Hint; since h symmetric, proposal density cancels out of ratio
R = function(y, ny, x, xt){
# x is the proposal, xt is current state
# x[1],xt[1] pertain to pi, x[2],xt[2] pertain to lambda
## start solution
loglike.old <- ll(y, ny, xt)
loglike.new <- ll(y, ny, x)
ratio <- exp(loglike.new - loglike.old)
if(is.na(ratio)) ratio <- 0
else ratio <- min(1, ratio)
## end solution
}
# set the seed
set.seed(1)
# data fro HW 6
y = 0:6
ny = c(3062, 587, 284, 103, 33, 4, 2)
# Set chain length
M = 20000
# initialize the chain vector (alpha, lambda)
x.rw.chain = matrix(0, M, 2)
colnames(x.rw.chain) = c("pi","lambda")
# Initialize chain with specified initial values
# alpha, lambda
x.rw.chain[1,] = c(0.3, 3)
i = 1
xt = x.rw.chain[i, ]
xt
x = h.sim(xt)
x
r = R(y, ny, x, xt)
r
pi.old <- xt[1]
lambda.old <- xt[2]
pi.new <-  rnorm(1, pi.old, 0.1)
lambda.new <- rnorm(1, lambda.old, 0.1)
pi.new
lambda.new
x = h.sim(xt)
x
loglike.old <- ll(y, ny, xt)
loglike.new <- ll(y, ny, x)
