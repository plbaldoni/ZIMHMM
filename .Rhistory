W=DTvec[,W],SIGMA2=sigma2.k)
u.k1 = U.opt$par
########################################################################
## Updating DT and DTvec
if(random=='intercept'){
DT[,paste0('Random.',1:N) := as.data.table(DT[,mapply("*",sqrt(sigma2.k)*u.k1,mget(rep('Dsg.Int',N)))])]
DT[,paste0('U.',1:N) := as.list(u.k1)]
DT[,paste0('W.',1:N) := mget(rep('Dsg.Int',N))]
} else{
DT[,paste0('Random.',1:N) := as.data.table(DT[,mapply("*",sqrt(sigma2.k)*u.k1,mget(paste0('Dsg.Control.',1:N)))])]
DT[,paste0('U.',1:N) := as.list(u.k1)]
DT[,paste0('W.',1:N) := mget(paste0('Dsg.Control.',1:N))]
}
# Stacking DT
DTvec <- vecData(DT,N,random = T)
# Creating Aggragating Variable
DTvec[,Group := .GRP,by=c('ChIP','Dsg.Int','Dsg.Control','offset','Random','U','W')]
# Creating Unique data.table
DTvec.unique <- unique(DTvec,by='Group')[,c('ChIP','Dsg.Int','Dsg.Control','offset','Random','U','W','Group')]
setkey(DTvec.unique,Group)
########################################################################
## Mean and log-likelihood matrices
mu = MHMMmean(XMAT = as.matrix(DTvec[,grepl('Dsg',names(DTvec)),with=F]),BETA = matrix(c(psi1.k[1:ncolControl],psi2.k[1:ncolControl]),nrow=K,byrow=T),RANDOM = as.matrix(DTvec[,Random]),OFFSETVEC = as.matrix(DTvec[,offset]),N = N,M = M,K = K)
mu[mu==0] = min.zero
loglik = MHMMLik(YVEC = DTvec[,ChIP],ZEROINFL = zeroinfl,MU = mu,DISP = c(psi1.k[(ncolControl+1)],psi2.k[(ncolControl+1)]),N = N,M = M,K = K)
# Forward-Backward probabilities
logF = hmm_logF(logf1 = loglik[,1], logf2 = loglik[,2], pi = pi.k,gamma=gamma.k)
logB = hmm_logB(logf1 = loglik[,1], logf2 = loglik[,2], pi = pi.k,gamma=gamma.k)
# Posterior probabilities
DT[,paste0('PostProb',1:2):=as.data.table(check.prob(hmm_P1(logF=logF,logB=logB)))]
DT[,paste0('JoinProb',c('11','12','21','22')):=as.data.table(check.prob(hmm_P2(logF=logF,logB=logB,logf1=loglik[,1],logf2=loglik[,2],gamma=gamma.k)))]
# M-step
## Initial and transition probabilities
PostProb = HMM.prob(DT)
pi.k1 = PostProb$pi
gamma.k1 = PostProb$gamma
zlist[[it.em]] = Viterbi(LOGF=loglik,P=pi.k1,GAMMA=gamma.k1)
## Model parameters
### General parameters for conditional EM iterations
error.inner.em = 1
count.inner.em = 1
parhist.inner.em = data.frame()
### Updating posterior probabilities with rejection-controlled EM
rejection = (pcut>0)*ifelse((0.9^it.em)>=pcut,(0.9^it.em),pcut)
DT[,c('Rejection1','Rejection2') := list(PostProb1,PostProb2)]
DT[PostProb1<rejection,Rejection1 := rbinom(.N,1,prob=PostProb1/rejection)*rejection]
DT[PostProb2<rejection,Rejection2 := rbinom(.N,1,prob=PostProb2/rejection)*rejection]
### Updating the vectorized dataset
DTvec[,c('Rejection1','Rejection2') := .(rep(DT[,Rejection1],N),rep(DT[,Rejection2],N))]
DTvec[,c('PostProb1','PostProb2') := .(rep(DT[,PostProb1],N),rep(DT[,PostProb2],N))]
### Aggregating data
dt1 <- agg(data = DTvec,data.unique = DTvec.unique,rows = '(Rejection1>0)',agg = 'Rejection1')
dt2 <- agg(data = DTvec,data.unique = DTvec.unique,rows = '(Rejection2>0)',agg = 'Rejection2')
dtsigma <- agg(data = DTvec,data.unique = DTvec.unique,agg = c('PostProb1','PostProb2'),random = T)
### Conditional EM begins
while(error.inner.em>epsilon.inner.em & count.inner.em<=maxcount.inner.em){
tryCatch({assign('model1',optim(par = inv.par(psi1.k,'zinb'),fn = glmm.zinb,gr = deriv.glmm.zinb,method = 'L-BFGS-B',lower=c(rep(-Inf,ncolControl),1/max.phi,rep(-Inf,ncolControl)),
Y.vec=dt1[,ChIP],X.mat=as.matrix(dt1[,grepl('Dsg',names(dt1)),with=F]),offset.glm.vec=as.matrix(dt1[,rowSums(.SD),.SDcols=c('Random','offset')]),offset.zi.vec=as.matrix(dt1[,offset]),weights.vec=as.matrix(dt1[,weights])))},
error=function(e){model1<<-list();model1[['par']]<<-inv.par(psi1.k,'zinb');model1[['convergence']]<<-99})
tryCatch({assign('model2',optim(par=inv.par(psi2.k,model='nb'),fn=glm.nb,gr=deriv.nb,method='L-BFGS-B',lower=c(rep(-Inf,ncolControl),1/max.phi),
Y.vec=dt2[,ChIP],X.mat=as.matrix(dt2[,grepl('Dsg',names(dt2)),with=F]),offset.vec=as.matrix(dt2[,rowSums(.SD),.SDcols=c('Random','offset')]),weights.vec=as.matrix(dt2[,weights])))},
error=function(e){model2<<-list();model2[['par']]<<-inv.par(psi2.k,model='nb');model2[['convergence']]<<-99})
psi1.k = inv.par(model1$par,model='zinb');names(psi1.k) = name.psi1
psi2.k = inv.par(model2$par,model='nb')
tryCatch({assign('model3',optim(par = 1/sigma2.old,fn = glm.s2,method = 'L-BFGS-B',lower = 1/max.sigma2,upper = 1/min.sigma2,
Yvec = dtsigma[,ChIP],Xmat = as.matrix(dtsigma[,grepl('Dsg',names(dtsigma)),with=F]),Uvec = dtsigma[,U],Wvec = dtsigma[,W],
PostProbBackground = dtsigma[,AggPostProb1],PostProbEnrichment = dtsigma[,AggPostProb2],Offset = dtsigma[,offset],
BackgroundPar = psi1.k,EnrichmentPar = psi2.k))},
error=function(e){model3<<-list();model3[['par']]<<-1/sigma2.k;model3[['convergence']]<<-99})
sigma2.k = 1/model3$par
# Updating the aggregated data
dt1[,Random := sqrt(sigma2.k)*U]
dt2[,Random := sqrt(sigma2.k)*U]
# Updating inner parameters
parhist.inner.em = rbind(parhist.inner.em,data.frame(t(c(psi1.k,psi2.k,sigma2=sigma2.k))))
# Calculating inner error
if(count.inner.em>1){error.inner.em = max(abs((parhist.inner.em[count.inner.em,]-parhist.inner.em[(count.inner.em-1),])/parhist.inner.em[(count.inner.em-1),]))}
count.inner.em = count.inner.em + 1
}
# Updating parameter history
psi1.k1 = psi1.k;psi2.k1 = psi2.k;psi.k1 = c(psi1.k1,psi2.k1)
sigma2.k1 = sigma2.k
theta.k1 = c(pi.k1,gamma.k1,psi.k1,sigma2.k1,u.k1);names(theta.k1) = names(theta.k)
theta.k = theta.k1
parlist[[it.em]] = c(it=it.em,Q=Q(as.matrix(DT[,.(PostProb1,PostProb2)]),as.matrix(DT[,.(JoinProb11,JoinProb12,JoinProb21,JoinProb22)]),loglik,pi.k1,gamma.k1),
error=error.em[1],theta.k1,m1=model1$convergence,m2=model2$convergence,m3=model3$convergence)
# Computing EM error
gap = ifelse(it.em>minit.em,gap.em,1)
if(it.em>1){
parlist.old = parlist[[(it.em-gap)]][names(psi.k1)]
parlist.new = parlist[[it.em]][names(psi.k1)]
zlist.table = data.table(old = zlist[[(it.em-gap)]], new = zlist[[it.em]])
ACC = 100*zlist.table[,.N,by=.(old,new)][(old==0 & new==0) | (old==1 & new==1),sum(N)]/M
} else{
parlist.old = rep(1,length(names(psi.k1)))
parlist.new = rep(1,length(names(psi.k1)))
ACC = 0
}
MRCPE = max(abs((parlist.new-parlist.old)/parlist.old)) #Max. Abs. Rel. Change. of par. estimates
MACPE = max(abs(parlist.new-parlist.old)) #Max. Abs. Change. of par. estimates
ARCEL = ifelse(it.em>=2,abs((parlist[[it.em]][['Q']] - parlist[[(it.em-gap)]][['Q']])/parlist[[(it.em-gap)]][['Q']]),0) #Abs. Rel. Change of expected log-likelihood of complete data (Q function)
MULTI = c(MRCPE,MACPE,ARCEL,100-ACC)
error.em = (it.em>=2)*get(criterion) + (it.em<2)*rep(1,length(get(criterion)))
count.em = as.numeric(any(error.em<=epsilon.em))*(it.em>minit.em)*(count.em+1) + 0
#Outputing history
if(!quiet){
cat(paste0(c(rep('#',45),'\n')))
cat('\rIteration: ',it.em,', Error(s): ',paste(formatC(error.em, format = "e", digits = 2),collapse = ', '),', Viterbi Agreement: ',round(ACC,2),'%.\n',sep='')
cat("\r",paste('Q-function: '),parlist[[it.em]][['Q']],"\n")
cat("\r",paste('Max. abs. rel. change of parameter estimates: '),MRCPE,"\n")
cat("\r",paste('Max. abs. change of parameter estimates: '),MACPE,"\n")
cat("\r",paste('Abs. rel. change of Q-function: '),ARCEL,"\n")
cat(paste0(c(rep('#',45),'\n')))
}
}
model1
test = as.data.frame(do.call(rbind,parlist))
plot(test$HMM1.Int)
plot(test$HMM2.Int)
plot(test$HMM1.Control)
plot(test$sigma2)
zlist[[it.em]]
table(zlist[[it.em]],dat$z)
plot(ChIP[1:1000,1])
head(ChIP)
ChIP[1:1000,1]
plot(ChIP[,1])
ChIP[,1]
as.numeric(ChIP[,1])
plot(dat$y.1)
plot(dat$y.1[1:100])
library(ZIMHMM)
library(ZIMHMM)
library(ZIMHMM)
library(ZIMHMM)
library(ZIMHMM)
install.packages('roxygen2')
library(roxygen2)
library(ZIMHMM)
data(hg19.rda)
data(hg19)
hg19
hg19
roxygenise()
library(roxygen2)
roxygenise()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ZIMHMM)
library(ZIMHMM)
document()
devtools::document()
ZIMHMM()
ZIMHMM
library("ZIMHMM", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(ZIMHMM)
devtools::document()
library(ZIMHMM)
head(H3K36me3.Huvec)
head(H3K36me3.Huvec)
devtools::document()
data("H3K36me3.Huvec")
H3K36me3.Huvec
Control = H3K36me3.Huvec[,c('Control.Huvec.Rep1','Control.Huvec.Rep2','Control.Huvec.Rep3')]
ChIP = H3K36me3.Huvec[,c('H3K36me3.Huvec.Rep1','H3K36me3.Huvec.Rep2','H3K36me3.Huvec.Rep3')]
document
document()
devtools::document()
devtools::document()
library(ZIMHMM)
?ZIMHMM
devtools::document()
library(ZIMHMM)
?ZIMHMM
data(H3K36me3.Huvec)
names(H3K36me3.Huvec)
?colSums
library(ZIMHMM)
ZIMHMM
?ZIMHMM
?ZIHMM
devtools::document()
library(ZIMHMM)
?ZIMHMM
?control
?glm
DESeq2::collapseReplicates()
?DESeq2::collapseReplicates()
?DESeq2::estimateSizeFactors
.Machine$double.xmin
devtools::document()
library(ZIMHMM)
ZIMHMM::findpeaks.control()
?findpeaks.control
devtools::document)_
devtools::document()
devtools::document()
library(ZIMHMM)
library(ZIMHMM)
library(ZIMHMM)
data(ZIMHMM::H3K36me3.Huvec)
data(H3K36me3.Huvec)
H3K36me3.Huvec
?ZIMHMM
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
dim(ChIP)
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control())
Rcpp.package.skeleton
library(Rcpp)
Rcpp.package.skeleton
Rcpp.package.skeleton("ZIMHMM",attributes=TRUE)
library(ZIMHMM)
library(devtools)
load_all()
Viterbi()
Viterbi
load_all()
document()
load_all()
Viterbi
library(ZIMHMM)
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control())
ZIMHMM(ChIP = ChIP,Control = Control,offset = offset,random = 'intercept',control = findpeaks.control())
document()
library(ZIMHMM)
?ZIMHMM
document()
library(ZIMHMM)
library(ZIMHMM)
?ZIMHMM
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(colSums(ChIP),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = T)
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control())
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(colSums(ChIP),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = T)
ChIP
offset
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(log(colSums(ChIP)),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = T)
offset
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control())
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-6,criterion = 'MRCPE'))
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
document()
devtools::use_readme_rmd()
usethis::use_readme_rmd()
?install_github
?ZIMHMM
devtools::document()
document()
devtools::document()
library(ZIMHMM)
document()
devtools::document()
devtools::document()
library(ZIMHMM)
data("H3K36me3.Huvec")
H3K36me3.Huvec
library(ZIMHMM)
save(H3K36me3.Huvec,file = './data/H3K36me3.Huvec.rda',compress = 'xz')
devtools::document()
library(ZIMHMM)
q()
library(ZIMHMM)
library(ZIMHMM)
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1")])
ChIP
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1")])+1)
Control
offset = matrix(log(colSums(ChIP))[1],nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = TRUE)
offset
peakcall = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
library(ZIMHMM)
peakcall = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(log(colSums(ChIP)),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = TRUE)
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
peakcall = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
x = peakcall
data = ChIP
?
?data.table::melt
names(data)
head(data)
data.table::melt(data,measure.vars=names(data))
datamelt = data.table::melt(data,measure.vars=names(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt
data.table::melt(data,measure.vars=names(data),value.name = 'Counts',variable.name = 'Replicates')
data.table::melt(as.data.table(data),measure.vars=names(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt = data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt <- data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt
datamelt <- NULL
datamelt <- data.table::melt(as.data.table(data),measure.vars=ncol(data),value.name = 'Counts',variable.name = 'Replicates')
datamelt
seq_len(3)
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt
peaks = NULL
if(is.null(peaks)){peaks <- x$Viterbi}
peaks
seq_len(ncol(data))
seq_len(nrow(data)
seq_len(nrow(data))
datamelt[,Window = rep(seq_len(nrow(data)),ncol(data))]
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
if(is.null(peaks)){datamelt[,Peaks := rep(x$Viterbi,ncol(data))]}else{datamelt[,Peaks := rep(peaks,ncol(data))]}
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datamelt
ggplot2::ggplot
ggplot2::ggplot(data=datamelt,aes(x=Window,y=Counts))+ggplot2::geom_lines()+ggplot2::facet_grid(rows=vars(Replicates))
library(ggplot2)
ggplot2::ggplot(data=datamelt,aes(x=Window,y=Counts))+ggplot2::geom_lines()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt,aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ranges = 1000:2000
datamelt[(Window%in%ranges),]
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datamelt
datamelt$Replicates
unique(datamelt$Replicates)
unique(datamelt$Replicates)[1]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
datapeak
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak
datapeak[(Window%in%ranges),]
datamelt[(Window%in%ranges),Counts]
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(data = datapeak[(Window%in%ranges),],aes(x=Window,xend=(Window+1),y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
max(datamelt[(Window%in%ranges),Counts])*1.1
max(datamelt[(Window%in%ranges),Counts])*1.1
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Window+1))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=max(datamelt[(Window%in%ranges),Counts])*1.1,yend=max(datamelt[(Window%in%ranges),Counts])*1.1))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
datapeak
datapeak[Peaks==0,Peaks := NA]
datapeak
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks,yend=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks,yend=max(datamelt[(Window%in%ranges),Counts])*1.1*Peaks,
size = 2))+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color='blue')+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
brewer.pal(2,'Set1')[2]
RColorBrewer::brewer.pal(2,'Set1')[2]
RColorBrewer::brewer.pal('Set1')[2]
RColorBrewer::brewer.pal('Set1')
RColorBrewer::brewer.pal(3,'Set1')
RColorBrewer::brewer.pal(3,'Set1')[2]
color = RColorBrewer::brewer.pal(3,'Set1')[2]
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')+scale_x_continuous(labels = scales::comma)
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
plotpeaks = function(x,ranges,data,peaks = NULL){
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
return(fig)
}
plotpeaks(peakcall,ranges = c(2000,3000),data=ChIP)
peakcall
ChIP
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
fig
ranges
plotpeaks = function(x,ranges,data,peaks = NULL){
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
return(fig)
}
plotpeaks(peakcall,c(1000,2000),data=ChIP)
plotpeaks(peakcall,c(1000,2000),data=ChIP)
data(H3K36me3.Huvec)
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(log(colSums(ChIP)),nrow = nrow(ChIP),ncol = ncol(ChIP),byrow = TRUE)
ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
x = ZIHMM(ChIP = ChIP,Control = Control,offset = offset,control = findpeaks.control(epsilon.em = 1e-3,criterion = 'MRCPE'))
x
ChIP
plotpeaks = function(x,ranges,data,peaks = NULL){
if(length(ranges)!=2 | ranges[2]<ranges[1]){stop('Argument ranges must be a vector of two integers (x,y) with y>x')}
ranges = ranges[1]:ranges[2]
datamelt <- data.table::melt(as.data.table(data),measure.vars=seq_len(ncol(data)),value.name = 'Counts',variable.name = 'Replicates')
datamelt[,Window := rep(seq_len(nrow(data)),ncol(data))]
datapeak = data.table::data.table(Window = seq_len(nrow(data)),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := x$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],aes(x=Window,y=Counts))+ggplot2::geom_line()+ggplot2::facet_grid(rows=vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
theme_bw()+xlab('Genomic Window')+ylab('Read Counts')
return(fig)
}
plotpeaks(x,ranges=c(1000,2000),data=ChIP)
library(ggplot2)
?aes
library(ZIMHMM)
plotpeaks
# Loading example dataset
data(H3K36me3.Huvec)
# ChIP and Control read counts, as well as the model offset.
ChIP = as.matrix(H3K36me3.Huvec[,c("H3K36me3.Huvec.Rep1","H3K36me3.Huvec.Rep2","H3K36me3.Huvec.Rep3")])
Control = log(as.matrix(H3K36me3.Huvec[,c("Control.Huvec.Rep1","Control.Huvec.Rep2","Control.Huvec.Rep3")])+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
# Calling peaks
peakcall = ZIMHMM(ChIP = ChIP,Control = Control,offset = offset,random = 'intercept',control = findpeaks.control())
plotpeaks(peakcall,ranges = c(50000,55000),ChIP = ChIP)
?theme_bw()
library(ZIMHMM)
devtools::document()
library(ZIMHMM)
