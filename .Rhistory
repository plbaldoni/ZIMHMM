PostProb$Component = plyr::mapvalues(PostProb$Component,from=c('PostProb2'),to=c('Enrichment'))
PostProb
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),labels = scales::comma)+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig.Prob
fig = ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))
fig
data
data[chr]
data[seqnames(data)]
seqnames(data)
data[seqnames(data)%in%'chr19']
chr = 'chr19'
ranges = c(8489652,8573464)
ranges
ranges = c(which.min(abs(start(rowRanges(data[seqnames(data)%in%chr]))-ranges[1])),which.min(abs(end(rowRanges(data[seqnames(data)%in%chr]))-ranges[2])))
ranges = ranges[1]:ranges[2]
ranges
'chr19'%in%seqnames(data)
'chr119'%in%seqnames(data)
ranges
range(PostProb[PostProb$Window%in%ranges,'Window'])
?scale_x_continuous
?scales::comma
data
rowRanges(data)
rowRanges(data)[oldr]
oldranges = ranges = c(8489652,8573464)
ranges
oldranges = ranges
data <- data[seqnames(data)%in%chr]
ranges = c(which.min(abs(start(rowRanges(data))-ranges[1])),which.min(abs(end(rowRanges(data))-ranges[2])))
ranges = ranges[1]:ranges[2]
ranges
ooldranges
oldranges
data
rowRanges(data)
rowRanges(data)[ranges]
start(rowRanges(data)[ranges])
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),labels = scales::comma(start(rowRanges(data)[ranges])))+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig.Prob
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),labels = scales::comma(start(rowRanges(data)[.])))+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),labels = function(x){scales::comma(start(rowRanges(data)[x]))})+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig.Prob
range(PostProb[PostProb$Window%in%ranges,'Window'])
ranges
split(ranges, sort(ranges%%4))
split(ranges, sort(ranges%%5))
lapply(split(ranges, sort(ranges%%5)),min)
lapply(split(ranges, sort(ranges%%7)),min)
lapply(split(ranges, sort(ranges%%5)),min)
lapply(split(ranges, sort(ranges%%5)),min)[1]
lapply(split(ranges, sort(ranges%%5)),min)[1:2]
lapply(split(ranges, sort(ranges%%5)),min)[2:4]
unlist(lapply(split(ranges, sort(ranges%%5)),min)[2:4])
scales::comma(start(rowRanges(data)[unlist(lapply(split(ranges, sort(ranges%%5)),min)[2:4])]))
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),
breaks = unlist(lapply(split(ranges, sort(ranges%%5)),min)[2:4]),
labels = scales::comma(start(rowRanges(data)[unlist(lapply(split(ranges, sort(ranges%%5)),min)[2:4])])))+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig.Prob
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),
breaks = unlist(lapply(split(ranges, sort(ranges%%5)),min)[2:4]),
labels = scales::comma(start(rowRanges(data)[unlist(lapply(split(ranges, sort(ranges%%5)),min)[2:4])])))+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig = ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))
fig
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%ranges,],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%ranges,'Window']),
breaks = unlist(lapply(split(ranges, sort(ranges%%5)),median)[2:4]),
labels = scales::comma(start(rowRanges(data)[unlist(lapply(split(ranges, sort(ranges%%5)),median)[2:4])])))+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig = ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))
fig
### Figure 2: Post. Probabilities ###
PostProb = data.table::data.table(Window=1:nrow(assay(data,'ChIP')),output$Prob,Label='PP')
PostProb
ranges
rowRanges(data)[ranges]
start(rowRanges(data)[ranges])
start(rowRanges(data))
### Figure 2: Post. Probabilities ###
PostProb = data.table::data.table(Window=start(rowRanges(data)),output$Prob,Label='PP')
PostProb
PostProb <- tidyr::gather(dplyr::as.tbl(PostProb),Component,PP,PostProb2)
PostProb
PostProb$Component = plyr::mapvalues(PostProb$Component,from=c('PostProb2'),to=c('Enrichment'))
PostProb
rowRanges(data)
rowRanges(data)[ranges]
PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),]
range(PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),'Window'])
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),'Window']),
labels = scales::comma)+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig.Prob
fig = ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))
fig
#' \dontrun{plotPeaks(output = output,chr = 'chr19',ranges = c(8489652,8573464),data = Huvec)}
#'
#' @importFrom RColorBrewer brewer.pal
#' @importFrom tidyr gather
#' @importFrom dplyr as.tbl
#' @importFrom plyr mapvalues
#' @importFrom ggpubr ggarrange
#' @importFrom scales comma
#' @export
#'
plotPeaks = function(output,chr,ranges,data,peaks = NULL){
#' \dontrun{plotPeaks(output = output,chr = 'chr19',ranges = c(8489652,8573464),data = Huvec)}
#'
#' @importFrom RColorBrewer brewer.pal
#' @importFrom tidyr gather
#' @importFrom dplyr as.tbl
#' @importFrom plyr mapvalues
#' @importFrom ggpubr ggarrange
#' @importFrom scales comma
#' @export
#'
plotPeaks = function(output,chr,ranges,data,peaks = NULL){
plotPeaks = function(output,chr,ranges,data,peaks = NULL){
if(length(ranges)!=2 | ranges[2]<ranges[1]){stop('Argument ranges must be a vector of two integers (x,y) with y>x')}
if(!chr%in%seqnames(data)){stop('Chromosome not found')}
oldranges = ranges
data <- data[seqnames(data)%in%chr]
ranges = c(which.min(abs(start(rowRanges(data))-ranges[1])),which.min(abs(end(rowRanges(data))-ranges[2])))
ranges = ranges[1]:ranges[2]
datamelt <- data.table::melt(as.data.table(assay(data,'ChIP')),measure.vars=seq_len(ncol(assay(data,'ChIP'))),value.name = 'Counts',variable.name = 'Replicates')
setattr(datamelt$Replicates,"levels",paste0('Replicate ',1:ncol(ChIP)))
datamelt[,Window := rep(seq_len(nrow(assay(data,'ChIP'))),ncol(assay(data,'ChIP')))]
datapeak = data.table::data.table(Window = seq_len(nrow(assay(data,'ChIP'))),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := output$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
### Figure 1: Read Counts and Peak Calls ###
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig.ChIP = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],ggplot2::aes(x=Window,y=Counts))+
ggplot2::geom_line()+
ggplot2::facet_grid(rows=ggplot2::vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],ggplot2::aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
ggplot2::theme_bw()+
ggplot2::xlab('Genomic Window')+
ggplot2::ylab('Read Counts')+
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.line.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank())
### Figure 2: Post. Probabilities ###
PostProb = data.table::data.table(Window=start(rowRanges(data)),output$Prob,Label='PP')
PostProb <- tidyr::gather(dplyr::as.tbl(PostProb),Component,PP,PostProb2)
PostProb$Component = plyr::mapvalues(PostProb$Component,from=c('PostProb2'),to=c('Enrichment'))
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),'Window']),
labels = scales::comma)+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig = ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))
return(fig)
}
plotPeaks(output = output,chr = 'chr19',ranges = c(5562469,5735681),data = Huvec)
plotPeaks(output = output,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
fig.ChIP = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],ggplot2::aes(x=Window,y=Counts))+
ggplot2::geom_line()+
ggplot2::facet_grid(rows=ggplot2::vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],ggplot2::aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
ggplot2::theme_bw()+
ggplot2::xlab('Genomic Window')+
ggplot2::ylab('Read Counts')+
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.line.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank())
### Figure 2: Post. Probabilities ###
PostProb = data.table::data.table(Window=start(rowRanges(data)),output$Prob,Label='PP')
PostProb <- tidyr::gather(dplyr::as.tbl(PostProb),Component,PP,PostProb2)
PostProb$Component = plyr::mapvalues(PostProb$Component,from=c('PostProb2'),to=c('Enrichment'))
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),'Window']),
labels = scales::comma)+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
fig = ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))
plotPeaks = function(output,chr,ranges,data,peaks = NULL){
if(length(ranges)!=2 | ranges[2]<ranges[1]){stop('Argument ranges must be a vector of two integers (x,y) with y>x')}
if(!chr%in%seqnames(data)){stop('Chromosome not found')}
oldranges = ranges
data <- data[seqnames(data)%in%chr]
ranges = c(which.min(abs(start(rowRanges(data))-ranges[1])),which.min(abs(end(rowRanges(data))-ranges[2])))
ranges = ranges[1]:ranges[2]
datamelt <- data.table::melt(as.data.table(assay(data,'ChIP')),measure.vars=seq_len(ncol(assay(data,'ChIP'))),value.name = 'Counts',variable.name = 'Replicates')
setattr(datamelt$Replicates,"levels",paste0('Replicate ',1:ncol(ChIP)))
datamelt[,Window := rep(seq_len(nrow(assay(data,'ChIP'))),ncol(assay(data,'ChIP')))]
datapeak = data.table::data.table(Window = seq_len(nrow(assay(data,'ChIP'))),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := output$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
### Figure 1: Read Counts and Peak Calls ###
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig.ChIP = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],ggplot2::aes(x=Window,y=Counts))+
ggplot2::geom_line()+
ggplot2::facet_grid(rows=ggplot2::vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],ggplot2::aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
ggplot2::theme_bw()+
ggplot2::xlab('Genomic Window')+
ggplot2::ylab('Read Counts')+
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.line.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank())
### Figure 2: Post. Probabilities ###
PostProb = data.table::data.table(Window=start(rowRanges(data)),output$Prob,Label='PP')
PostProb <- tidyr::gather(dplyr::as.tbl(PostProb),Component,PP,PostProb2)
PostProb$Component = plyr::mapvalues(PostProb$Component,from=c('PostProb2'),to=c('Enrichment'))
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),'Window']),
labels = scales::comma)+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
suppressWarnings({fig <- ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))})
return(fig)
}
plotPeaks(output = output,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
library(ZIMHMM)
devtools::document()
library(ZIMHMM)
devtools::document()
library(ZIMHMM)
devtools::document()
Huvec
seqnames(Huvec)
'chr19'%in%seqnames(Huvec)
if(!'chr19''%in%seqnames(Huvec)){stop('Chromosome not found')}
(!'chr19''%in%seqnames(Huvec)
(!'chr19''%in%seqnames(Huvec))
!'chr19''%in%seqnames(Huvec)
!'chr19'%in%seqnames(Huvec)
devtools::document()
library(ZIMHMM)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(ZIMHMM)
library(SummarizedExperiment)
# Loading example dataset
data(Huvec)
# ChIP and Control read counts, as well as the model offset.
ChIP = assay(Huvec,'ChIP')
Control = log(assay(Huvec,'Control')+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
# Calling peaks
peakcall = ZIMHMM(ChIP = ChIP,Control = Control,offset = offset,random = 'intercept',control = controlPeaks())
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
peakcall
output = peakcall
chr = 'chr19'
ranges = c(16898093,17040483)
ranges = c(16898093,17040483)
data = Huvec
if(length(ranges)!=2 | ranges[2]<ranges[1]){stop('Argument ranges must be a vector of two integers (x,y) with y>x')}
if(!chr%in%seqnames(data)){stop('Chromosome not found')}
oldranges = ranges
data <- data[chr%in%seqnames(data)]
ranges = c(which.min(abs(start(rowRanges(data))-ranges[1])),which.min(abs(end(rowRanges(data))-ranges[2])))
ranges = ranges[1]:ranges[2]
datamelt <- data.table::melt(as.data.table(assay(data,'ChIP')),measure.vars=seq_len(ncol(assay(data,'ChIP'))),value.name = 'Counts',variable.name = 'Replicates')
setattr(datamelt$Replicates,"levels",paste0('Replicate ',1:ncol(ChIP)))
datamelt[,Window := rep(seq_len(nrow(assay(data,'ChIP'))),ncol(assay(data,'ChIP')))]
datapeak = data.table::data.table(Window = seq_len(nrow(assay(data,'ChIP'))),Replicates = unique(datamelt$Replicates)[1])
if(is.null(peaks)){
datapeak[,Peaks := output$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
peaks = NULL
if(is.null(peaks)){
datapeak[,Peaks := output$Viterbi]
} else{
datapeak[,Peaks := peaks]
}
datapeak[Peaks==0,Peaks := NA]
### Figure 1: Read Counts and Peak Calls ###
maxy = max(datamelt[(Window%in%ranges),Counts])*1.1
color = RColorBrewer::brewer.pal(3,'Set1')[2]
fig.ChIP = ggplot2::ggplot(data=datamelt[(Window%in%ranges),],ggplot2::aes(x=Window,y=Counts))+
ggplot2::geom_line()+
ggplot2::facet_grid(rows=ggplot2::vars(Replicates))+
ggplot2::geom_segment(inherit.aes=FALSE,data = datapeak[(Window%in%ranges),],ggplot2::aes(x=Window,xend=Window+1,y=maxy*Peaks,yend=maxy*Peaks),size=2,color=color)+
ggplot2::theme_bw()+
ggplot2::xlab('Genomic Window')+
ggplot2::ylab('Read Counts')+
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.line.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank())
### Figure 2: Post. Probabilities ###
PostProb = data.table::data.table(Window=start(rowRanges(data)),output$Prob,Label='PP')
PostProb <- tidyr::gather(dplyr::as.tbl(PostProb),Component,PP,PostProb2)
PostProb$Component = plyr::mapvalues(PostProb$Component,from=c('PostProb2'),to=c('Enrichment'))
fig.Prob = ggplot2::ggplot(data=PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),],ggplot2::aes(x=Window,y=PP,fill=Component))+
ggplot2::facet_grid(rows=ggplot2::vars(Label))+
ggplot2::geom_area(position='identity',alpha=1,color=color,fill=color)+
ggplot2::scale_y_continuous(limits = c(0,1),breaks=c(0,0.5,1))+
ggplot2::scale_x_continuous(limits = range(PostProb[PostProb$Window%in%start(rowRanges(data)[ranges]),'Window']),
labels = scales::comma)+
ggplot2::xlab(paste0('Genomic Window'))+
ggplot2::ylab('Post. Prob.')+
ggplot2::theme_bw()+
ggplot2::theme(legend.position = 'bottom',legend.direction = 'horizontal',
strip.text.y = ggplot2::element_text(colour = ggplot2::alpha('grey',0.0)))+
ggplot2::theme(legend.position="none")
suppressWarnings({fig <- ggpubr::ggarrange(fig.ChIP,fig.Prob,ncol=1,nrow=2,heights = c(0.8,0.2))})
fig
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
!chr%in%seqnames(data)
?seqnames
GenomicRanges::seqnames(data)
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
plotPeaks
chr%in%GenomicRanges::seqnames(data)
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
#' @importFrom RColorBrewer brewer.pal
#' @importFrom tidyr gather
#' @importFrom dplyr as.tbl
#' @importFrom plyr mapvalues
#' @importFrom ggpubr ggarrange
#' @importFrom scales comma
#' @importFrom GenomicRanges seqnames
#'
#' @export
#'
plotPeaks = function(output,chr,ranges,data,peaks = NULL){
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
GenomicRanges::seqnames(data)==chr
devtools::load_all()
# Plotting peak calls
plotPeaks(output = peakcall,chr = 'chr19',ranges = c(16898093,17040483),data = Huvec)
library(ZIMHMM)
x = list.files(
pattern = "[.]Rproj[.]user",
all.files = TRUE,
include.dirs = TRUE,
recursive = TRUE,
no.. = TRUE)
x
dir.size = function(path) {
res = system(paste0("du ", shQuote(path)), intern = TRUE)
ss = strsplit(res, "\t")
ss = sapply(ss, function(x) as.numeric(x[1]))
sum(ss)
}
dir.size
sizes = sapply(x, dir.size)
sizes
devtools::load_all()
# Loading example dataset
data(Huvec)
Huvec
assay(ChIP)
assay(Huvec,ChIP)
assay(Huvec,'ChIP')
rowData(Huvec)
rowRanges(Huvec)
# ChIP and Control read counts, as well as the model offset.
ChIP = assay(Huvec,'ChIP')
Control = log(assay(Huvec,'Control')+1)
offset = matrix(0,nrow = nrow(ChIP),ncol = ncol(ChIP))
?ZIHMM
?list.files
?file.path
file.path('.',cells,'Output','quant.sf')
?tximport
library(tximport)
library(csaw)
?windowCounts
?normOffsets
log2(3)
log2(1)
2^log2(3)
log2(1.5)
log2(2)
2^log2(2)
log2(2)
?clusterWindows
